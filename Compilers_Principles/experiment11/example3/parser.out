Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    BREAK

Grammar

Rule 0     S' -> program
Rule 1     program -> statements
Rule 2     statements -> statements statement
Rule 3     statements -> statement
Rule 4     statement -> assignment
Rule 5     statement -> operation
Rule 6     statement -> print
Rule 7     statement -> if
Rule 8     statement -> while
Rule 9     assignment -> VARIABLE = NUMBER
Rule 10    assignment -> VARIABLE = VARIABLE
Rule 11    operation -> VARIABLE = VARIABLE + VARIABLE
Rule 12    operation -> VARIABLE = VARIABLE - VARIABLE
Rule 13    print -> PRINT ( VARIABLE )
Rule 14    if -> IF ( condition ) { statements }
Rule 15    condition -> VARIABLE > VARIABLE
Rule 16    condition -> VARIABLE < VARIABLE
Rule 17    while -> WHILE ( condition ) { statements }
Rule 18    exprs -> exprs , expr
Rule 19    exprs -> expr
Rule 20    expr -> NUMBER
Rule 21    expr -> VARIABLE
Rule 22    len -> LEN ( VARIABLE )

Terminals, with rules where they appear

(                    : 13 14 17 22
)                    : 13 14 17 22
+                    : 11
,                    : 18
-                    : 12
<                    : 16
=                    : 9 10 11 12
>                    : 15
BREAK                : 
IF                   : 14
LEN                  : 22
NUMBER               : 9 20
PRINT                : 13
VARIABLE             : 9 10 10 11 11 11 12 12 12 13 15 15 16 16 21 22
WHILE                : 17
error                : 
{                    : 14 17
}                    : 14 17

Nonterminals, with rules where they appear

assignment           : 4
condition            : 14 17
expr                 : 18 19
exprs                : 18
if                   : 7
len                  : 
operation            : 5
print                : 6
program              : 0
statement            : 2 3
statements           : 1 2 14 17
while                : 8

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statements
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) assignment -> . VARIABLE = VARIABLE
    (11) operation -> . VARIABLE = VARIABLE + VARIABLE
    (12) operation -> . VARIABLE = VARIABLE - VARIABLE
    (13) print -> . PRINT ( VARIABLE )
    (14) if -> . IF ( condition ) { statements }
    (17) while -> . WHILE ( condition ) { statements }

    VARIABLE        shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12

    program                        shift and go to state 1
    statements                     shift and go to state 2
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 1

    (0) S' -> program .



state 2

    (1) program -> statements .
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) assignment -> . VARIABLE = VARIABLE
    (11) operation -> . VARIABLE = VARIABLE + VARIABLE
    (12) operation -> . VARIABLE = VARIABLE - VARIABLE
    (13) print -> . PRINT ( VARIABLE )
    (14) if -> . IF ( condition ) { statements }
    (17) while -> . WHILE ( condition ) { statements }

    $end            reduce using rule 1 (program -> statements .)
    VARIABLE        shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12

    statement                      shift and go to state 13
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 3

    (3) statements -> statement .

    VARIABLE        reduce using rule 3 (statements -> statement .)
    PRINT           reduce using rule 3 (statements -> statement .)
    IF              reduce using rule 3 (statements -> statement .)
    WHILE           reduce using rule 3 (statements -> statement .)
    $end            reduce using rule 3 (statements -> statement .)
    }               reduce using rule 3 (statements -> statement .)


state 4

    (4) statement -> assignment .

    VARIABLE        reduce using rule 4 (statement -> assignment .)
    PRINT           reduce using rule 4 (statement -> assignment .)
    IF              reduce using rule 4 (statement -> assignment .)
    WHILE           reduce using rule 4 (statement -> assignment .)
    $end            reduce using rule 4 (statement -> assignment .)
    }               reduce using rule 4 (statement -> assignment .)


state 5

    (5) statement -> operation .

    VARIABLE        reduce using rule 5 (statement -> operation .)
    PRINT           reduce using rule 5 (statement -> operation .)
    IF              reduce using rule 5 (statement -> operation .)
    WHILE           reduce using rule 5 (statement -> operation .)
    $end            reduce using rule 5 (statement -> operation .)
    }               reduce using rule 5 (statement -> operation .)


state 6

    (6) statement -> print .

    VARIABLE        reduce using rule 6 (statement -> print .)
    PRINT           reduce using rule 6 (statement -> print .)
    IF              reduce using rule 6 (statement -> print .)
    WHILE           reduce using rule 6 (statement -> print .)
    $end            reduce using rule 6 (statement -> print .)
    }               reduce using rule 6 (statement -> print .)


state 7

    (7) statement -> if .

    VARIABLE        reduce using rule 7 (statement -> if .)
    PRINT           reduce using rule 7 (statement -> if .)
    IF              reduce using rule 7 (statement -> if .)
    WHILE           reduce using rule 7 (statement -> if .)
    $end            reduce using rule 7 (statement -> if .)
    }               reduce using rule 7 (statement -> if .)


state 8

    (8) statement -> while .

    VARIABLE        reduce using rule 8 (statement -> while .)
    PRINT           reduce using rule 8 (statement -> while .)
    IF              reduce using rule 8 (statement -> while .)
    WHILE           reduce using rule 8 (statement -> while .)
    $end            reduce using rule 8 (statement -> while .)
    }               reduce using rule 8 (statement -> while .)


state 9

    (9) assignment -> VARIABLE . = NUMBER
    (10) assignment -> VARIABLE . = VARIABLE
    (11) operation -> VARIABLE . = VARIABLE + VARIABLE
    (12) operation -> VARIABLE . = VARIABLE - VARIABLE

    =               shift and go to state 14


state 10

    (13) print -> PRINT . ( VARIABLE )

    (               shift and go to state 15


state 11

    (14) if -> IF . ( condition ) { statements }

    (               shift and go to state 16


state 12

    (17) while -> WHILE . ( condition ) { statements }

    (               shift and go to state 17


state 13

    (2) statements -> statements statement .

    VARIABLE        reduce using rule 2 (statements -> statements statement .)
    PRINT           reduce using rule 2 (statements -> statements statement .)
    IF              reduce using rule 2 (statements -> statements statement .)
    WHILE           reduce using rule 2 (statements -> statements statement .)
    $end            reduce using rule 2 (statements -> statements statement .)
    }               reduce using rule 2 (statements -> statements statement .)


state 14

    (9) assignment -> VARIABLE = . NUMBER
    (10) assignment -> VARIABLE = . VARIABLE
    (11) operation -> VARIABLE = . VARIABLE + VARIABLE
    (12) operation -> VARIABLE = . VARIABLE - VARIABLE

    NUMBER          shift and go to state 19
    VARIABLE        shift and go to state 18


state 15

    (13) print -> PRINT ( . VARIABLE )

    VARIABLE        shift and go to state 20


state 16

    (14) if -> IF ( . condition ) { statements }
    (15) condition -> . VARIABLE > VARIABLE
    (16) condition -> . VARIABLE < VARIABLE

    VARIABLE        shift and go to state 22

    condition                      shift and go to state 21

state 17

    (17) while -> WHILE ( . condition ) { statements }
    (15) condition -> . VARIABLE > VARIABLE
    (16) condition -> . VARIABLE < VARIABLE

    VARIABLE        shift and go to state 22

    condition                      shift and go to state 23

state 18

    (10) assignment -> VARIABLE = VARIABLE .
    (11) operation -> VARIABLE = VARIABLE . + VARIABLE
    (12) operation -> VARIABLE = VARIABLE . - VARIABLE

    VARIABLE        reduce using rule 10 (assignment -> VARIABLE = VARIABLE .)
    PRINT           reduce using rule 10 (assignment -> VARIABLE = VARIABLE .)
    IF              reduce using rule 10 (assignment -> VARIABLE = VARIABLE .)
    WHILE           reduce using rule 10 (assignment -> VARIABLE = VARIABLE .)
    $end            reduce using rule 10 (assignment -> VARIABLE = VARIABLE .)
    }               reduce using rule 10 (assignment -> VARIABLE = VARIABLE .)
    +               shift and go to state 24
    -               shift and go to state 25


state 19

    (9) assignment -> VARIABLE = NUMBER .

    VARIABLE        reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    PRINT           reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    IF              reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    WHILE           reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    $end            reduce using rule 9 (assignment -> VARIABLE = NUMBER .)
    }               reduce using rule 9 (assignment -> VARIABLE = NUMBER .)


state 20

    (13) print -> PRINT ( VARIABLE . )

    )               shift and go to state 26


state 21

    (14) if -> IF ( condition . ) { statements }

    )               shift and go to state 27


state 22

    (15) condition -> VARIABLE . > VARIABLE
    (16) condition -> VARIABLE . < VARIABLE

    >               shift and go to state 28
    <               shift and go to state 29


state 23

    (17) while -> WHILE ( condition . ) { statements }

    )               shift and go to state 30


state 24

    (11) operation -> VARIABLE = VARIABLE + . VARIABLE

    VARIABLE        shift and go to state 31


state 25

    (12) operation -> VARIABLE = VARIABLE - . VARIABLE

    VARIABLE        shift and go to state 32


state 26

    (13) print -> PRINT ( VARIABLE ) .

    VARIABLE        reduce using rule 13 (print -> PRINT ( VARIABLE ) .)
    PRINT           reduce using rule 13 (print -> PRINT ( VARIABLE ) .)
    IF              reduce using rule 13 (print -> PRINT ( VARIABLE ) .)
    WHILE           reduce using rule 13 (print -> PRINT ( VARIABLE ) .)
    $end            reduce using rule 13 (print -> PRINT ( VARIABLE ) .)
    }               reduce using rule 13 (print -> PRINT ( VARIABLE ) .)


state 27

    (14) if -> IF ( condition ) . { statements }

    {               shift and go to state 33


state 28

    (15) condition -> VARIABLE > . VARIABLE

    VARIABLE        shift and go to state 34


state 29

    (16) condition -> VARIABLE < . VARIABLE

    VARIABLE        shift and go to state 35


state 30

    (17) while -> WHILE ( condition ) . { statements }

    {               shift and go to state 36


state 31

    (11) operation -> VARIABLE = VARIABLE + VARIABLE .

    VARIABLE        reduce using rule 11 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    PRINT           reduce using rule 11 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    IF              reduce using rule 11 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    WHILE           reduce using rule 11 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    $end            reduce using rule 11 (operation -> VARIABLE = VARIABLE + VARIABLE .)
    }               reduce using rule 11 (operation -> VARIABLE = VARIABLE + VARIABLE .)


state 32

    (12) operation -> VARIABLE = VARIABLE - VARIABLE .

    VARIABLE        reduce using rule 12 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    PRINT           reduce using rule 12 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    IF              reduce using rule 12 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    WHILE           reduce using rule 12 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    $end            reduce using rule 12 (operation -> VARIABLE = VARIABLE - VARIABLE .)
    }               reduce using rule 12 (operation -> VARIABLE = VARIABLE - VARIABLE .)


state 33

    (14) if -> IF ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) assignment -> . VARIABLE = VARIABLE
    (11) operation -> . VARIABLE = VARIABLE + VARIABLE
    (12) operation -> . VARIABLE = VARIABLE - VARIABLE
    (13) print -> . PRINT ( VARIABLE )
    (14) if -> . IF ( condition ) { statements }
    (17) while -> . WHILE ( condition ) { statements }

    VARIABLE        shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12

    statements                     shift and go to state 37
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 34

    (15) condition -> VARIABLE > VARIABLE .

    )               reduce using rule 15 (condition -> VARIABLE > VARIABLE .)


state 35

    (16) condition -> VARIABLE < VARIABLE .

    )               reduce using rule 16 (condition -> VARIABLE < VARIABLE .)


state 36

    (17) while -> WHILE ( condition ) { . statements }
    (2) statements -> . statements statement
    (3) statements -> . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) assignment -> . VARIABLE = VARIABLE
    (11) operation -> . VARIABLE = VARIABLE + VARIABLE
    (12) operation -> . VARIABLE = VARIABLE - VARIABLE
    (13) print -> . PRINT ( VARIABLE )
    (14) if -> . IF ( condition ) { statements }
    (17) while -> . WHILE ( condition ) { statements }

    VARIABLE        shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12

    statements                     shift and go to state 38
    statement                      shift and go to state 3
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 37

    (14) if -> IF ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) assignment -> . VARIABLE = VARIABLE
    (11) operation -> . VARIABLE = VARIABLE + VARIABLE
    (12) operation -> . VARIABLE = VARIABLE - VARIABLE
    (13) print -> . PRINT ( VARIABLE )
    (14) if -> . IF ( condition ) { statements }
    (17) while -> . WHILE ( condition ) { statements }

    }               shift and go to state 39
    VARIABLE        shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12

    statement                      shift and go to state 13
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 38

    (17) while -> WHILE ( condition ) { statements . }
    (2) statements -> statements . statement
    (4) statement -> . assignment
    (5) statement -> . operation
    (6) statement -> . print
    (7) statement -> . if
    (8) statement -> . while
    (9) assignment -> . VARIABLE = NUMBER
    (10) assignment -> . VARIABLE = VARIABLE
    (11) operation -> . VARIABLE = VARIABLE + VARIABLE
    (12) operation -> . VARIABLE = VARIABLE - VARIABLE
    (13) print -> . PRINT ( VARIABLE )
    (14) if -> . IF ( condition ) { statements }
    (17) while -> . WHILE ( condition ) { statements }

    }               shift and go to state 40
    VARIABLE        shift and go to state 9
    PRINT           shift and go to state 10
    IF              shift and go to state 11
    WHILE           shift and go to state 12

    statement                      shift and go to state 13
    assignment                     shift and go to state 4
    operation                      shift and go to state 5
    print                          shift and go to state 6
    if                             shift and go to state 7
    while                          shift and go to state 8

state 39

    (14) if -> IF ( condition ) { statements } .

    VARIABLE        reduce using rule 14 (if -> IF ( condition ) { statements } .)
    PRINT           reduce using rule 14 (if -> IF ( condition ) { statements } .)
    IF              reduce using rule 14 (if -> IF ( condition ) { statements } .)
    WHILE           reduce using rule 14 (if -> IF ( condition ) { statements } .)
    $end            reduce using rule 14 (if -> IF ( condition ) { statements } .)
    }               reduce using rule 14 (if -> IF ( condition ) { statements } .)


state 40

    (17) while -> WHILE ( condition ) { statements } .

    VARIABLE        reduce using rule 17 (while -> WHILE ( condition ) { statements } .)
    PRINT           reduce using rule 17 (while -> WHILE ( condition ) { statements } .)
    IF              reduce using rule 17 (while -> WHILE ( condition ) { statements } .)
    WHILE           reduce using rule 17 (while -> WHILE ( condition ) { statements } .)
    $end            reduce using rule 17 (while -> WHILE ( condition ) { statements } .)
    }               reduce using rule 17 (while -> WHILE ( condition ) { statements } .)

